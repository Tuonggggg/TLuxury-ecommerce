// src/lib/axios.js
import axios from "axios";

// üí° L∆ØU √ù: T·∫°o m·ªôt instance KH√ÅC cho y√™u c·∫ßu refresh ƒë·ªÉ tr√°nh v√≤ng l·∫∑p interceptor
const refreshInstance = axios.create({
  baseURL: "http://localhost:5000/api",
  withCredentials: true,
});

const api = axios.create({
  baseURL: "http://localhost:5000/api",
  withCredentials: true,
});

// 1. Request Interceptor (ƒê√≠nh k√®m Access Token)
api.interceptors.request.use(
  (config) => {
    const accessToken = localStorage.getItem("accessToken");
    if (accessToken) {
      config.headers.Authorization = `Bearer ${accessToken}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// 2. Response Interceptor (X·ª≠ l√Ω 401 v√† Refresh)
api.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config; // ƒêi·ªÅu ki·ªán: L·ªói 401 V√Ä ch∆∞a th·ª≠ l·∫°i (tr√°nh v√≤ng l·∫∑p)

    if (error.response.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true; // üîë TRI·ªÇN KHAI LOGIC REFRESH TOKEN

      try {
        // G·ªçi endpoint refresh token (s·ª≠ d·ª•ng refreshInstance)
        const res = await refreshInstance.post("/auth/refresh", {});
        const newAccessToken = res.data.accessToken;

        // 1. L∆∞u token m·ªõi v√†o Local Storage
        localStorage.setItem("accessToken", newAccessToken);

        // 2. C·∫≠p nh·∫≠t header cho request g·ªëc v√† instance hi·ªán t·∫°i
        api.defaults.headers.common[
          "Authorization"
        ] = `Bearer ${newAccessToken}`; // C·∫≠p nh·∫≠t instance ch√≠nh
        originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;

        // 3. Th·ª≠ l·∫°i request g·ªëc v·ªõi token m·ªõi
        return api(originalRequest);
      } catch (refreshError) {
        // N·∫øu Refresh Token c≈©ng kh√¥ng h·ª£p l·ªá (l·ªói 403 t·ª´ BE)

        // 1. X√≥a t·∫•t c·∫£ token c·ª•c b·ªô
        localStorage.removeItem("accessToken");

        // 2. Chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p l·∫°i
        window.location.href = "/account/login";
        return Promise.reject(refreshError);
      }
    }

    // N·∫øu l·ªói kh√¥ng ph·∫£i 401 ho·∫∑c ƒë√£ th·ª≠ refresh th·∫•t b·∫°i
    return Promise.reject(error);
  }
);

export default api;
