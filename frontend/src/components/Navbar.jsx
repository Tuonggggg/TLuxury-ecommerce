import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '@/lib/axios';
import { ChevronDown } from 'lucide-react';
import { toast } from 'sonner'; // Th√™m toast ƒë·ªÉ th√¥ng b√°o l·ªói cache

const CACHE_KEY = 'categories_cache_v1';
const CACHE_TTL = 24 * 60 * 60 * 1000; // 24 gi·ªù

const CategoryItem = ({ cat, handleCategoryClick }) => {
  const hasChildren = cat.children && cat.children.length > 0;

  return (
    <li key={cat._id || cat.name} className="relative group/item transition-elegant">
      <button
        onClick={() => handleCategoryClick(cat)}
        className="inline-flex items-center text-sm font-medium h-10 px-4 text-primary-foreground transition-elegant hover:bg-primary-light hover:text-white"
      >
        {cat.name || cat.title}
        {hasChildren && (
          <ChevronDown className="ml-1 h-4 w-4 transition-transform duration-300 group-hover/item:rotate-180" />
        )}
      </button>

      {hasChildren && (
        <div
          className="absolute left-1/2 -translate-x-1/2 mt-0 w-56 
¬† ¬† ¬† ¬† ¬† bg-white rounded-lg shadow-lg border border-gray-200 
¬† ¬† ¬† ¬† ¬† opacity-0 invisible group-hover/item:opacity-100 group-hover/item:visible 
¬† ¬† ¬† ¬† ¬† transition-elegant z-20"
          style={{ minWidth: 'max-content' }}
        >
          <ul>
            {cat.children.map((child) => (
              <li key={child._id || child.name}>
                <button
                  onClick={() => handleCategoryClick(child)}
                  className="w-full text-left px-4 py-2 text-sm transition-colors cursor-pointer rounded-md font-medium
¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† hover:bg-[#FFEED4] hover:text-[#654a21]"
                >
                  {child.name || child.title}
                </button>
              </li>
            ))}
          </ul>
        </div>
      )}
    </li>
  );
};

const Navbar = ({ openMenu, setOpenMenu }) => {
  const navigate = useNavigate();
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(false);

  // ‚úÖ H√†m t·∫£i danh m·ª•c v·ªõi cache (ƒê√É TH√äM LOGIC X√ìA CACHE KHI L·ªñI)
  const fetchCategories = async (force = false) => {
    try {
      // Ki·ªÉm tra cache c√≥ t·ªìn t·∫°i v√† c√≤n h·∫°n
      const cache = localStorage.getItem(CACHE_KEY);
      if (!force && cache) {
        const { data, timestamp } = JSON.parse(cache);
        if (Date.now() - timestamp < CACHE_TTL) {
          setCategories(data);
          return; // d√πng cache, kh√¥ng g·ªçi API n·ªØa
        }
      }

      setLoading(true);
      const res = await api.get('/categories');
      const data = Array.isArray(res.data)
        ? res.data
        : Array.isArray(res.data?.data)
          ? res.data.data
          : Array.isArray(res.data?.items)
            ? res.data.items
            : [];

      setCategories(data);
      // ‚úÖ L∆∞u v√†o cache
      localStorage.setItem(
        CACHE_KEY,
        JSON.stringify({ data, timestamp: Date.now() })
      );
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫£i danh m·ª•c:', error);
      // üö® B∆Ø·ªöC QUAN TR·ªåNG: X√≥a cache n·∫øu t·∫£i th·∫•t b·∫°i ƒë·ªÉ bu·ªôc t·∫£i l·∫°i l·∫ßn sau
      localStorage.removeItem(CACHE_KEY);
      toast.error("Kh√¥ng th·ªÉ t·∫£i danh m·ª•c s·∫£n ph·∫©m.", {
        description: "ƒê√£ x√≥a cache c≈©, vui l√≤ng t·∫£i l·∫°i trang."
      });
      setCategories([]);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchCategories();
  }, []);

  const handleCategoryClick = (category) => {
    // üö® B∆Ø·ªöC KH·∫ÆC PH·ª§C: ∆Øu ti√™n d√πng SLUG, n·∫øu kh√¥ng c√≥ slug, d√πng name.
    // L·ªói c√≥ th·ªÉ x·∫£y ra n·∫øu category.slug l√† undefined ho·∫∑c null trong cache c≈©.
    const identifier = category.slug || category.name;

    // N·∫øu identifier l√† gi√° tr·ªã b·ªã l·ªói (v√≠ d·ª•: "SOFA" m√† b·∫°n ƒë√£ s·ª≠a th√†nh "SOFA DA")
    if (identifier === "SOFA" && category.name === "SOFA DA") {
      // ƒê√¢y l√† l·ªói x·∫£y ra do cache: identifier ƒëang l√† SOFA nh∆∞ng category.name ƒë√£ l√† SOFA DA
      const correctSlug = category.slug;
      navigate(`/category/${encodeURIComponent(correctSlug)}`);

      // Bu·ªôc t·∫£i l·∫°i categories ƒë·ªÉ x√≥a s·∫°ch cache Frontend b·ªã l·ªói
      fetchCategories(true);
      toast.warning("D·ªØ li·ªáu danh m·ª•c ƒëang l·ªói th·ªùi, ƒë√£ c·∫≠p nh·∫≠t l·∫°i cache.");
    } else {
      // ƒêi·ªÅu h∆∞·ªõng b√¨nh th∆∞·ªùng
      navigate(`/category/${encodeURIComponent(identifier)}`);
    }

    if (setOpenMenu) setOpenMenu(false);
  };

  const parentCategories = categories.filter((cat) => cat.parent === null);

  return (
    <nav className="bg-[#654321] border-primary-dark/80 shadow-md">
      {/* Desktop Navbar */}
      <ul className="hidden md:flex justify-center">
        {loading ? (
          <li className="h-10 flex items-center px-4 text-sm text-primary-foreground">
            ƒêang t·∫£i...
          </li>
        ) : parentCategories.length > 0 ? (
          parentCategories.map((cat) => (
            <CategoryItem
              key={cat._id}
              cat={cat}
              handleCategoryClick={handleCategoryClick}
            />
          ))
        ) : (
          <li className="h-10 flex items-center px-4 text-sm text-primary-foreground">
            Kh√¥ng c√≥ danh m·ª•c
          </li>
        )}
      </ul>

      {/* Mobile Navbar */}
      {openMenu && (
        <ul className="md:hidden flex flex-col gap-1 px-4 py-3 bg-[#FFF9F3] border-[#D3BFA6]">
          {loading ? (
            <li className="py-2 text-sm text-[#654321]">ƒêang t·∫£i...</li>
          ) : categories.length > 0 ? (
            categories.map((cat) => (
              <li key={cat._id || cat.name}>
                <button
                  onClick={() => handleCategoryClick(cat)}
                  className="w-full text-left py-2 px-3 text-sm font-medium text-[#654321] border-[#E8D9C4]
¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† hover:bg-[#FFEED4] hover:text-[#654a21] rounded-md transition-all duration-200"
                >
                  {cat.name || cat.title}
                </button>
              </li>
            ))
          ) : (
            <li className="py-2 text-sm text-[#654321]">Kh√¥ng c√≥ danh m·ª•c</li>
          )}
        </ul>
      )}
    </nav>
  );
};

export default Navbar;