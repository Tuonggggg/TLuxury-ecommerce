import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Eye, EyeOff, UserPlus, Phone, Mail, Lock, User, CheckCircle } from 'lucide-react';
import { Link } from 'react-router-dom'; // ‚ö†Ô∏è S·ª≠a l·ªói: Import t·ª´ 'react-router-dom'
import axios from 'axios'; // üîë Import Axios

// --- C·∫•u h√¨nh API Base URL (N√™n ƒë·∫∑t trong .env) ---
const API_URL = 'http://localhost:5000/api/auth/register'; // ‚ö†Ô∏è THAY TH·∫æ b·∫±ng URL API Backend c·ªßa b·∫°n

// --- ZOD SCHEMA (Gi·ªØ nguy√™n) ---
const registerSchema = z.object({
  fullName: z.string().min(2, 'H·ªç t√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±'),
  email: z.string().email('Email kh√¥ng h·ª£p l·ªá'),
  username: z.string().min(3, 'T√™n ƒëƒÉng nh·∫≠p ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±'),
  password: z.string().min(6, 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±'),
  confirmPassword: z.string(),
  phone: z.string().regex(/^[0-9]{10,11}$/, 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá'),
  terms: z.boolean().refine((val) => val === true, {
    message: 'B·∫°n ph·∫£i ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n s·ª≠ d·ª•ng',
  }),
}).refine((data) => data.password === data.confirmPassword, {
  message: 'M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp',
  path: ['confirmPassword'],
});

// --- HELPER COMPONENT: InputField (Gi·ªØ nguy√™n) ---
const InputField = React.forwardRef(({ label, type, error, placeholder, name, icon: Icon, showToggle, toggleState, toggleHandler, ...rest }, ref) => {

  const inputType = showToggle && !toggleState ? 'password' : type;

  return (
    <div>
      <label htmlFor={name} className="block text-sm font-medium text-gray-700 mb-2">
        {label} <span className="text-red-500">*</span>
      </label>
      <div className="relative group">
        {/* Icon b√™n tr√°i */}
        {Icon && (
          <Icon className="absolute left-4 top-1/2 -translate-y-1/2 text-indigo-400 w-5 h-5 group-focus-within:text-indigo-600 transition-colors" />
        )}

        <input
          id={name}
          ref={ref}
          name={name}
          type={inputType}
          className={`w-full ${Icon ? 'pl-12' : 'pl-4'} ${showToggle ? 'pr-14' : 'pr-4'} py-3 border rounded-xl focus:ring-2 focus:ring-indigo-500/50 focus:border-indigo-600 transition-all bg-gray-50 font-medium ${error ? 'border-red-500' : 'border-gray-300'
            }`}
          placeholder={placeholder}
          {...rest}
        />

        {/* N√∫t ·∫©n/hi·ªán m·∫≠t kh·∫©u */}
        {showToggle && (
          <button
            type="button"
            onClick={toggleHandler}
            className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 hover:text-indigo-700 p-1.5 rounded-full hover:bg-indigo-50/50 transition"
            aria-label={toggleState ? "Hide password" : "Show password"}
          >
            {toggleState ? <EyeOff size={20} /> : <Eye size={20} />}
          </button>
        )}
      </div>
      {error && (
        <p className="text-red-500 text-sm mt-1 flex items-center gap-1.5">
          <span className="font-semibold">{error.message}</span>
        </p>
      )}
    </div>
  );
});
InputField.displayName = 'InputField';

// --- MAIN COMPONENT ---

export default function RegisterPage() {
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [apiError, setApiError] = useState(''); // State ƒë·ªÉ l∆∞u l·ªói t·ª´ API
  const [successMessage, setSuccessMessage] = useState(''); // State ƒë·ªÉ l∆∞u th√¥ng b√°o th√†nh c√¥ng

  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
  } = useForm({
    resolver: zodResolver(registerSchema),
  });

  const onSubmit = async (data) => {
    if (isSubmitting) return;

    setIsSubmitting(true);
    setApiError(''); // Reset l·ªói tr∆∞·ªõc khi submit
    setSuccessMessage(''); // Reset th√¥ng b√°o th√†nh c√¥ng

    // 1. Chu·∫©n h√≥a d·ªØ li·ªáu g·ª≠i ƒëi (ch·ªâ g·ª≠i nh·ªØng tr∆∞·ªùng API y√™u c·∫ßu)
    const payload = {
      username: data.username,
      email: data.email,
      password: data.password,
      // C√≥ th·ªÉ th√™m role n·∫øu b·∫°n mu·ªën ng∆∞·ªùi d√πng t·ª± ch·ªçn, n·∫øu kh√¥ng backend s·∫Ω d√πng default: "user"
      // role: 'user', 
    };

    try {
      // 2. G·ªçi API ƒêƒÉng k√Ω
      const res = await axios.post(API_URL, payload);

      // 3. X·ª≠ l√Ω th√†nh c√¥ng
      if (res.data && res.status === 201) {
        setSuccessMessage('ƒêƒÉng k√Ω t√†i kho·∫£n th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p.');
        reset(); // X√≥a form
        // üí° T√πy ch·ªçn: Chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng ƒë·∫øn trang ƒëƒÉng nh·∫≠p sau 2 gi√¢y
        // setTimeout(() => navigate('/account/login'), 2000); 
      }

    } catch (error) {
      // 4. X·ª≠ l√Ω l·ªói t·ª´ API
      const errorMessage = error.response
        && error.response.data
        && error.response.data.message
        ? error.response.data.message // L·∫•y l·ªói t·ª´ BE (v√≠ d·ª•: "Email ƒë√£ t·ªìn t·∫°i.")
        : error.message || 'ƒê√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh ƒëƒÉng k√Ω.';

      setApiError(errorMessage);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
      <div className="w-full max-w-xl bg-white rounded-3xl shadow-2xl p-10 transform transition-all duration-500">

        {/* Header */}
        <div className="text-center mb-10">
          <div className="inline-flex items-center justify-center w-16 h-16 bg-indigo-600 rounded-full mb-4 shadow-xl shadow-indigo-500/30">
            <UserPlus className="w-8 h-8 text-white" />
          </div>
          <h1 className="text-3xl font-extrabold text-gray-900 tracking-tight">T·∫°o T√†i Kho·∫£n M·ªõi</h1>
          <p className="text-gray-500 mt-2 text-md">ƒêi·ªÅn th√¥ng tin chi ti·∫øt d∆∞·ªõi ƒë√¢y ƒë·ªÉ b·∫Øt ƒë·∫ßu</p>
        </div>

        {/* ‚ö†Ô∏è HI·ªÇN TH·ªä L·ªñI API ‚ö†Ô∏è */}
        {apiError && (
          <div className="p-4 mb-6 text-sm text-red-700 bg-red-100 rounded-lg" role="alert">
            <span className="font-medium">L·ªói ƒëƒÉng k√Ω:</span> {apiError}
          </div>
        )}

        {/* ‚ö†Ô∏è HI·ªÇN TH·ªä TH√îNG B√ÅO TH√ÄNH C√îNG ‚ö†Ô∏è */}
        {successMessage && (
          <div className="p-4 mb-6 text-sm text-green-700 bg-green-100 rounded-lg" role="alert">
            <span className="font-medium">Th√†nh c√¥ng!</span> {successMessage}
          </div>
        )}

        {/* Form Body */}
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">

          {/* H√†ng 1: Full Name */}
          <InputField
            label="H·ªç v√† T√™n"
            type="text"
            name="fullName"
            placeholder="Nguy·ªÖn VƒÉn A"
            icon={User}
            error={errors.fullName}
            {...register('fullName')}
          />

          <InputField
            label="Email"
            type="email"
            name="email"
            placeholder="email@example.com"
            icon={Mail}
            error={errors.email}
            {...register('email')}
          />

          {/* H√†ng 2: T√™n ƒëƒÉng nh·∫≠p & S·ªë ƒëi·ªán tho·∫°i (2 c·ªôt) */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <InputField
              label="T√™n ƒëƒÉng nh·∫≠p"
              type="text"
              name="username"
              placeholder="username"
              icon={User}
              error={errors.username}
              {...register('username')}
            />

            <InputField
              label="S·ªë ƒëi·ªán tho·∫°i"
              type="tel"
              name="phone"
              placeholder="0123456789"
              icon={Phone}
              error={errors.phone}
              {...register('phone')}
            />
          </div>

          {/* H√†ng 3: M·∫≠t kh·∫©u & X√°c nh·∫≠n m·∫≠t kh·∫©u (2 c·ªôt) */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <InputField
              label="M·∫≠t kh·∫©u"
              type="password"
              name="password"
              placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
              icon={Lock}
              error={errors.password}
              showToggle={true}
              toggleState={showPassword}
              toggleHandler={() => setShowPassword(!showPassword)}
              {...register('password')}
            />

            <InputField
              label="X√°c nh·∫≠n m·∫≠t kh·∫©u"
              type="password"
              name="confirmPassword"
              placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
              icon={Lock}
              error={errors.confirmPassword}
              showToggle={true}
              toggleState={showConfirmPassword}
              toggleHandler={() => setShowConfirmPassword(!showConfirmPassword)}
              {...register('confirmPassword')}
            />
          </div>

          {/* H√†ng 4: Terms Checkbox */}
          <div className="pt-2">
            <div className="flex items-start">
              <input
                {...register('terms')}
                type="checkbox"
                className="mt-1 w-5 h-5 text-indigo-600 border-gray-300 rounded-md focus:ring-indigo-500 cursor-pointer"
              />
              <label className="ml-3 text-sm text-gray-600 select-none">
                T√¥i ƒë·ªìng √Ω v·ªõi{' '}
                <Link to="#" className="text-indigo-600 hover:text-indigo-700 hover:underline font-bold transition">
                  ƒëi·ªÅu kho·∫£n d·ªãch v·ª•
                </Link>{' '}
                v√†{' '}
                <Link to="#" className="text-indigo-600 hover:text-indigo-700 hover:underline font-bold transition">
                  ch√≠nh s√°ch b·∫£o m·∫≠t
                </Link>
              </label>
            </div>
            {errors.terms && (
              <p className="text-red-500 text-sm mt-2 ml-8 flex items-center gap-1.5 font-semibold">
                <CheckCircle className="w-4 h-4 text-red-500" />
                {errors.terms.message}
              </p>
            )}
          </div>

          {/* Submit Button */}
          <button
            type="submit"
            disabled={isSubmitting}
            className="w-full bg-gradient-to-r from-indigo-600 to-blue-600 text-white py-3.5 rounded-xl font-bold text-lg tracking-wider hover:from-indigo-700 hover:to-blue-700 transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed shadow-xl shadow-indigo-500/30 transform hover:scale-[1.005] active:scale-[0.99] flex items-center justify-center mt-8"
          >
            {isSubmitting ? (
              <div className="flex items-center">
                <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-3"></div>
                ƒêang x·ª≠ l√Ω...
              </div>
            ) : (
              'Ho√†n T·∫•t ƒêƒÉng K√Ω'
            )}
          </button>
        </form>

        {/* Footer Link */}
        <p className="text-center text-md text-gray-500 mt-8">
          B·∫°n ƒë√£ c√≥ t√†i kho·∫£n?{' '}
          <Link to="/account/login" className="text-indigo-600 hover:text-indigo-700 hover:underline font-bold">
            ƒêƒÉng nh·∫≠p ngay
          </Link>
        </p>
      </div>
    </div>
  );
}