import React, { useState, useEffect } from "react";
import { Trash2, Plus, Minus, ShoppingBag, Loader2 } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@/components/ui/pagination";
import { Link } from "react-router-dom";
import api from "@/lib/axios";
import { toast } from "sonner"; 

const CartPage = () => {
  
  const [cartItems, setCartItems] = useState([]);
  const [loading, setLoading] = useState(false);
  const [updatingItemId, setUpdatingItemId] = useState(null); 
  const [currentPage, setCurrentPage] = useState(1);

  const itemsPerPage = 4;

  // Format ti·ªÅn t·ªá
  const formatPrice = (price) => {
    return price?.toLocaleString("vi-VN") + "‚Ç´";
  };


  // ‚úÖ L·∫•y gi·ªè h√†ng t·ª´ backend (ƒê√É S·ª¨A L·ªñI MAPPING D·ªÆ LI·ªÜU)
  const fetchCart = async () => {
    setLoading(true);
    try {
      const { data } = await api.get("/cart");
      
      const rawCart = (data && data.items) ? data : { items: [] };

      // üö® √ÅNH X·∫† D·ªÆ LI·ªÜU T·ª™ BACKEND ƒê·ªÇ KH·ªöP V·ªöI FRONT-END
      const mappedItems = rawCart.items.map(item => ({
          // Backend d√πng item.product._id, Front-end c·∫ßn item.id
          id: item.product._id, 
          // Backend d√πng item.qty, Front-end c·∫ßn item.quantity
          quantity: item.qty, 
          // L·∫•y c√°c tr∆∞·ªùng c·∫ßn thi·∫øt kh√°c t·ª´ item.product
          name: item.product.name, 
          price: item.price, // Gi√° ƒë√£ l∆∞u trong gi·ªè h√†ng (gi√° cu·ªëi c√πng)
          image: item.product.images && item.product.images.length > 0 ? item.product.images[0] : "/placeholder.png", // L·∫•y ·∫£nh ƒë·∫ßu ti√™n
          stock: item.product.stock, // T·ªìn kho cho vi·ªác ki·ªÉm tra c·∫≠p nh·∫≠t
      }));
      
      setCartItems(mappedItems);
    } catch (error) {
      console.error("L·ªói khi t·∫£i gi·ªè h√†ng:", error);
      toast.error("Kh√¥ng th·ªÉ t·∫£i gi·ªè h√†ng.", {
          description: error.response?.data?.message || "Vui l√≤ng ki·ªÉm tra l·∫°i k·∫øt n·ªëi v√† ƒëƒÉng nh·∫≠p.",
      });
      setCartItems([]);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchCart();
  }, []);

  // ‚úÖ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
  const updateQuantity = async (id, newQty) => {
    const item = cartItems.find(i => i.id === id);
    if (!item) return;

    if (newQty < 1) {
      removeItem(id); 
      return;
    }
    
    const maxStock = item.stock || 999; 

    if (newQty > maxStock) {
      toast.warning("V∆∞·ª£t qu√° gi·ªõi h·∫°n t·ªìn kho!", {
          description: `Ch·ªâ c√≤n ${maxStock} s·∫£n ph·∫©m ${item.name} trong kho.`,
      });
      return;
    }

    setUpdatingItemId(id); 
    try {
      // Backend d√πng tham s·ªë URL l√† productId v√† payload l√† qty
      await api.put(`/cart/${id}`, { qty: newQty }); 
      
      setCartItems((prev) =>
        prev.map((i) =>
          i.id === id ? { ...i, quantity: newQty } : i
        )
      );
      toast.success("C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th√†nh c√¥ng!");

    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:", error);
      toast.error("C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th·∫•t b·∫°i.", {
          description: error.response?.data?.message || "ƒê√£ x·∫£y ra l·ªói h·ªá th·ªëng.",
      });
    } finally {
      setUpdatingItemId(null); 
    }
  };

  // ‚úÖ X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè
  const removeItem = async (id) => {
    const item = cartItems.find(i => i.id === id);
    if (!item) return;
    
    setUpdatingItemId(id); 
    try {
      // Backend d√πng tham s·ªë URL l√† productId
      await api.delete(`/cart/${id}`); 
      
      setCartItems((prev) => prev.filter((i) => i.id !== id));
      toast.success(`ƒê√£ x√≥a "${item.name}" kh·ªèi gi·ªè h√†ng.`);

      if (currentItems.length === 1 && currentPage > 1) {
          setCurrentPage(prev => prev - 1);
      }

    } catch (error) {
      console.error("L·ªói khi x√≥a s·∫£n ph·∫©m:", error);
      toast.error("X√≥a s·∫£n ph·∫©m th·∫•t b·∫°i.", {
          description: error.response?.data?.message || "Vui l√≤ng th·ª≠ l·∫°i.",
      });
    } finally {
        setUpdatingItemId(null); 
    }
  };

  // ‚úÖ Ph√¢n trang
  const totalItems = cartItems.length;
  const totalPages = Math.ceil(totalItems / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const currentItems = cartItems.slice(startIndex, startIndex + itemsPerPage);

  // ‚úÖ T·ªïng ti·ªÅn
  const totalPrice = cartItems.reduce(
    (sum, item) => sum + item.price * item.quantity,
    0
  );

  return (
    <div className="max-w-6xl mx-auto px-4 py-10">
      <h1 className="text-3xl font-bold mb-6 flex items-center gap-2">
        <ShoppingBag className="w-8 h-8 text-blue-600" /> Gi·ªè h√†ng c·ªßa b·∫°n
      </h1>

      {loading ? (
        <p className="text-center py-10 flex justify-center items-center text-lg text-gray-600">
            <Loader2 className="w-5 h-5 mr-2 animate-spin" /> ƒêang t·∫£i gi·ªè h√†ng...
        </p>
      ) : totalItems === 0 ? (
        <div className="text-center py-20 bg-white rounded-xl shadow-lg">
          <p className="text-lg text-gray-600">Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng.</p>
          <Button className="mt-6 cursor-pointer bg-blue-600 hover:bg-blue-700">
            {/* S·ª≠ d·ª•ng <Link> ƒë√£ ƒë∆∞·ª£c import */}
            <Link to="/">Ti·∫øp t·ª•c mua s·∫Øm</Link>
          </Button>
        </div>
      ) : (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Danh s√°ch s·∫£n ph·∫©m */}
          <div className="lg:col-span-2 space-y-6">
            {currentItems.map((item) => {
                const isUpdating = updatingItemId === item.id;
                const maxStock = item.stock || 999;
                
                return (
                <div
                    key={item.id}
                    className={`flex items-center gap-4 bg-white rounded-xl shadow-sm p-4 border transition-opacity ${isUpdating ? 'opacity-70' : ''}`}
                >
                    <img
                        src={item.image}
                        alt={item.name}
                        className="w-24 h-24 object-cover rounded-md border"
                    />
                    <div className="flex-1">
                        <h2 className="text-lg font-semibold">{item.name}</h2>
                        <p className="text-red-600 font-bold">
                            {formatPrice(item.price)}
                        </p>

                        {/* S·ªë l∆∞·ª£ng */}
                        <div className="flex items-center gap-3 mt-2">
                            <Button
                                variant="outline"
                                size="icon"
                                onClick={() => updateQuantity(item.id, item.quantity - 1)}
                                disabled={isUpdating || item.quantity <= 1}
                            >
                                <Minus size={16} />
                            </Button>
                            <span className="px-3 min-w-[30px] text-center font-medium">{item.quantity}</span>
                            <Button
                                variant="outline"
                                size="icon"
                                onClick={() => updateQuantity(item.id, item.quantity + 1)}
                                disabled={isUpdating || item.quantity >= maxStock}
                            >
                                <Plus size={16} />
                            </Button>
                            {isUpdating && <Loader2 className="w-4 h-4 animate-spin text-blue-500" />}
                        </div>
                    </div>

                    {/* X√≥a s·∫£n ph·∫©m */}
                    <Button
                        variant="ghost"
                        size="icon"
                        onClick={() => removeItem(item.id)}
                        disabled={isUpdating}
                    >
                        <Trash2 className="w-5 h-5 text-red-500 hover:text-red-700" />
                    </Button>
                </div>
            )})}

            {/* Ph√¢n trang */}
            {totalPages > 1 && (
              <Pagination className="mt-6">
                <PaginationContent>
                  <PaginationItem>
                    <PaginationPrevious
                      onClick={() =>
                        setCurrentPage((p) => Math.max(1, p - 1))
                      }
                      className={
                        currentPage === 1
                          ? "pointer-events-none opacity-50"
                          : "cursor-pointer"
                      }
                    />
                  </PaginationItem>
                  {Array.from({ length: totalPages }, (_, i) => (
                    <PaginationItem key={i}>
                      <PaginationLink
                        isActive={currentPage === i + 1}
                        onClick={() => setCurrentPage(i + 1)}
                        className="cursor-pointer"
                      >
                        {i + 1}
                      </PaginationLink>
                    </PaginationItem>
                  ))}
                  <PaginationItem>
                    <PaginationNext
                      onClick={() =>
                        setCurrentPage((p) => Math.min(totalPages, p + 1))
                      }
                      className={
                        currentPage === totalPages
                          ? "pointer-events-none opacity-50"
                          : "cursor-pointer"
                      }
                    />
                  </PaginationItem>
                </PaginationContent>
              </Pagination>
            )}
          </div>

          {/* Thanh to√°n */}
          <div className="bg-white rounded-xl shadow-lg p-6 h-fit lg:sticky lg:top-20 border">
            <h2 className="text-xl font-bold mb-4">T√≥m t·∫Øt ƒë∆°n h√†ng ({totalItems} s·∫£n ph·∫©m)</h2>
            <div className="flex justify-between mb-2">
              <span className="text-gray-600">T·∫°m t√≠nh</span>
              <span>{formatPrice(totalPrice)}</span>
            </div>
            <div className="flex justify-between mb-2">
              <span className="text-gray-600">Ph√≠ v·∫≠n chuy·ªÉn</span>
              <span>Mi·ªÖn ph√≠</span>
            </div>
            <div className="border-t my-4"></div>
            <div className="flex justify-between font-bold text-xl">
              <span>T·ªïng c·ªông</span>
              <span className="text-blue-600">
                {formatPrice(totalPrice)}
              </span>
            </div>
            <Button className="w-full mt-6 bg-blue-600 hover:bg-blue-700">
              <Link to="/cart/checkout">Ti·∫øn h√†nh thanh to√°n</Link>
            </Button>
            <Button variant="outline" className="w-full mt-3 cursor-pointer border-blue-600 text-blue-600 hover:bg-blue-50">
              <Link to="/">Ti·∫øp t·ª•c mua s·∫Øm</Link>
            </Button>
          </div>
        </div>
      )}
    </div>
  );
};

export default CartPage;