import Cart from "../models/CartModel.js";
import Product from "../models/ProductModel.js";

// H√†m ti·ªán √≠ch: T√≠nh gi√° cu·ªëi c√πng sau khi √°p d·ª•ng discount
const calculateFinalPrice = (product) => {
  const price = product.price;
  const discount = product.discount || 0;
  return price - (price * discount) / 100;
};

// =========================================================
// KI·ªÇM TRA X√ÅC TH·ª∞C NG∆Ø·ªúI D√ôNG
// T·∫•t c·∫£ c√°c h√†m b√™n d∆∞·ªõi ƒë·ªÅu gi·∫£ ƒë·ªãnh ƒë√£ c√≥ protect middleware,
// nh∆∞ng ch√∫ng ta s·∫Ω th√™m ki·ªÉm tra user_id t∆∞·ªùng minh ƒë·ªÉ tr√°nh l·ªói 500.
// =========================================================

// L·∫•y gi·ªè h√†ng c·ªßa user
export const getCart = async (req, res) => {
  // üö® KI·ªÇM TRA B·∫ÆT BU·ªòC
  if (!req.user || !req.user._id) {
    return res
      .status(401)
      .json({ message: "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem gi·ªè h√†ng." });
  }

  try {
    const cart = await Cart.findOne({ user: req.user._id }).populate(
      "items.product"
    );
    if (!cart) return res.json({ items: [] });

    // T√≠nh t·ªïng ti·ªÅn (s·ª≠ d·ª•ng gi√° ƒë√£ l∆∞u trong gi·ªè n·∫øu c√≥, ho·∫∑c t√≠nh l·∫°i)
    const cartWithTotal = cart.toObject();
    cartWithTotal.totalPrice = cart.items.reduce((sum, item) => {
      // ∆Øu ti√™n s·ª≠ d·ª•ng gi√° ƒë√£ l∆∞u trong gi·ªè (item.price)
      const itemPrice = item.price || calculateFinalPrice(item.product);
      return sum + itemPrice * item.qty;
    }, 0);

    res.json(cartWithTotal);
  } catch (error) {
    console.error("L·ªói SERVER khi l·∫•y gi·ªè h√†ng:", error);
    res
      .status(500)
      .json({ message: "L·ªói khi l·∫•y gi·ªè h√†ng", error: error.message });
  }
};

// Th√™m s·∫£n ph·∫©m v√†o gi·ªè
export const addToCart = async (req, res) => {
  // üö® B·∫ÆT L·ªñI X√ÅC TH·ª∞C (L·ªñI 500)
  if (!req.user || !req.user._id) {
    return res
      .status(401)
      .json({ message: "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng." });
  }

  const { productId, qty } = req.body;

  try {
    const product = await Product.findById(productId);
    if (!product)
      return res.status(404).json({ message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i" });
    if (product.status === "unavailable")
      return res.status(400).json({ message: "S·∫£n ph·∫©m hi·ªán kh√¥ng b√°n" });

    // ‚úÖ L∆ØU √ù: T√≠nh gi√° s·∫£n ph·∫©m cu·ªëi c√πng c·∫ßn l∆∞u
    const finalPrice = calculateFinalPrice(product);

    // Ki·ªÉm tra t·ªìn kho
    if (product.stock < qty)
      return res
        .status(400)
        .json({
          message: `S·ªë l∆∞·ª£ng v∆∞·ª£t qu√° t·ªìn kho. C√≤n ${product.stock} s·∫£n ph·∫©m.`,
        });

    let cart = await Cart.findOne({ user: req.user._id });

    if (!cart) {
      // T·∫°o gi·ªè h√†ng m·ªõi
      cart = new Cart({
        user: req.user._id,
        items: [{ product: productId, qty, price: finalPrice }], // ‚úÖ ƒê√£ th√™m price
      });
    } else {
      const itemIndex = cart.items.findIndex(
        (item) => item.product.toString() === productId
      );
      if (itemIndex > -1) {
        // S·∫£n ph·∫©m ƒë√£ c√≥: C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
        const newQty = cart.items[itemIndex].qty + qty;
        if (newQty > product.stock)
          return res
            .status(400)
            .json({
              message: `S·ªë l∆∞·ª£ng m·ªõi (${newQty}) v∆∞·ª£t qu√° t·ªìn kho (${product.stock}).`,
            });

        cart.items[itemIndex].qty = newQty;
        cart.items[itemIndex].price = finalPrice; // ‚úÖ C·∫≠p nh·∫≠t gi√° theo gi√° hi·ªán t·∫°i
      } else {
        // S·∫£n ph·∫©m ch∆∞a c√≥: Th√™m v√†o m·∫£ng
        cart.items.push({ product: productId, qty, price: finalPrice }); // ‚úÖ ƒê√£ th√™m price
      }
    }

    const updatedCart = await cart.save();
    res.json(await updatedCart.populate("items.product"));
  } catch (error) {
    console.error("L·ªói SERVER khi th√™m s·∫£n ph·∫©m v√†o gi·ªè:", error);
    res
      .status(500)
      .json({
        message: "L·ªói Server n·ªôi b·ªô khi th√™m s·∫£n ph·∫©m v√†o gi·ªè",
        error: error.message,
      });
  }
};

// C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
export const updateCartItem = async (req, res) => {
  // üö® B·∫ÆT L·ªñI X√ÅC TH·ª∞C (L·ªñI 500)
  if (!req.user || !req.user._id) {
    return res
      .status(401)
      .json({ message: "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ c·∫≠p nh·∫≠t gi·ªè h√†ng." });
  }

  const { qty } = req.body;

  try {
    const cart = await Cart.findOne({ user: req.user._id });
    if (!cart)
      return res.status(404).json({ message: "Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i" });

    const itemIndex = cart.items.findIndex(
      (item) => item.product.toString() === req.params.productId
    );

    if (itemIndex === -1)
      return res.status(404).json({ message: "S·∫£n ph·∫©m kh√¥ng c√≥ trong gi·ªè" });

    const product = await Product.findById(req.params.productId);
    if (!product)
      return res.status(404).json({ message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i" });
    if (qty > product.stock)
      return res.status(400).json({ message: "S·ªë l∆∞·ª£ng v∆∞·ª£t qu√° t·ªìn kho" });

    // ‚úÖ C·∫≠p nh·∫≠t gi√° cu·ªëi c√πng khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
    const finalPrice = calculateFinalPrice(product);

    if (qty <= 0) {
      cart.items.splice(itemIndex, 1);
    } else {
      cart.items[itemIndex].qty = qty;
      cart.items[itemIndex].price = finalPrice; // ‚úÖ C·∫≠p nh·∫≠t gi√°
    }

    const updatedCart = await cart.save();
    res.json(await updatedCart.populate("items.product"));
  } catch (error) {
    console.error("L·ªói SERVER khi c·∫≠p nh·∫≠t gi·ªè h√†ng:", error);
    res
      .status(500)
      .json({ message: "L·ªói khi c·∫≠p nh·∫≠t gi·ªè h√†ng", error: error.message });
  }
};

// X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè
export const removeFromCart = async (req, res) => {
  // üö® B·∫ÆT L·ªñI X√ÅC TH·ª∞C (L·ªñI 500)
  if (!req.user || !req.user._id) {
    return res
      .status(401)
      .json({ message: "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng." });
  }

  try {
    const cart = await Cart.findOne({ user: req.user._id });
    if (!cart)
      return res.status(404).json({ message: "Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i" });

    cart.items = cart.items.filter(
      (item) => item.product.toString() !== req.params.productId
    );

    const updatedCart = await cart.save();
    res.json(await updatedCart.populate("items.product"));
  } catch (error) {
    console.error("L·ªói SERVER khi x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè:", error);
    res
      .status(500)
      .json({ message: "L·ªói khi x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè", error: error.message });
  }
};

// X√≥a to√†n b·ªô gi·ªè h√†ng
export const clearCart = async (req, res) => {
  // üö® B·∫ÆT L·ªñI X√ÅC TH·ª∞C (L·ªñI 500)
  if (!req.user || !req.user._id) {
    return res
      .status(401)
      .json({ message: "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ x√≥a to√†n b·ªô gi·ªè h√†ng." });
  }

  try {
    const cart = await Cart.findOne({ user: req.user._id });
    if (cart) {
      cart.items = [];
      await cart.save();
    }
    res.json({ message: "ƒê√£ x√≥a to√†n b·ªô gi·ªè h√†ng" });
  } catch (error) {
    console.error("L·ªói SERVER khi x√≥a to√†n b·ªô gi·ªè h√†ng:", error);
    res
      .status(500)
      .json({ message: "L·ªói khi x√≥a gi·ªè h√†ng", error: error.message });
  }
};
