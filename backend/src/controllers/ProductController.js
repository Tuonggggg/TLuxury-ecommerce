import mongoose from "mongoose";
import Product from "../models/ProductModel.js";
import Category from "../models/CategoryModel.js";

// =========================================================
// H√ÄM TI·ªÜN √çCH: LO·∫†I B·ªé D·∫§U TI·∫æNG VI·ªÜT
// =========================================================
const removeVietnameseSigns = (str) => {
  if (!str) return "";
  str = str.toLowerCase();
  str = str.replace(/√†|√°|·∫°|·∫£|√£|√¢|·∫ß|·∫•|·∫≠|·∫©|·∫´|ƒÉ|·∫±|·∫Ø|·∫∑|·∫≥|·∫µ/g, "a");
  str = str.replace(/√®|√©|·∫π|·∫ª|·∫Ω|√™|·ªÅ|·∫ø|·ªá|·ªÉ|·ªÖ/g, "e");
  str = str.replace(/√¨|√≠|·ªã|·ªâ|ƒ©/g, "i");
  str = str.replace(/√≤|√≥|·ªç|·ªè|√µ|√¥|·ªì|·ªë|·ªô|·ªï|·ªó|∆°|·ªù|·ªõ|·ª£|·ªü|·ª°/g, "o");
  str = str.replace(/√π|√∫|·ª•|·ªß|≈©|∆∞|·ª´|·ª©|·ª±|·ª≠|·ªØ/g, "u");
  str = str.replace(/·ª≥|√Ω|·ªµ|·ª∑|·ªπ/g, "y");
  str = str.replace(/ƒë/g, "d");
  str = str.replace(/√Ä|√Å|·∫†|·∫¢|√É|√Ç|·∫¶|·∫§|·∫¨|·∫®|·∫™|ƒÇ|·∫∞|·∫Æ|·∫∂|·∫≤|·∫¥/g, "A");
  str = str.replace(/√à|√â|·∫∏|·∫∫|·∫º|√ä|·ªÄ|·∫æ|·ªÜ|·ªÇ|·ªÑ/g, "E");
  str = str.replace(/√å|√ç|·ªä|·ªà|ƒ®/g, "I");
  str = str.replace(/√í|√ì|·ªå|·ªé|√ï|√î|·ªí|·ªê|·ªò|·ªî|·ªñ|∆†|·ªú|·ªö|·ª¢|·ªû|·ª†/g, "O");
  str = str.replace(/√ô|√ö|·ª§|·ª¶|≈®|∆Ø|·ª™|·ª®|·ª∞|·ª¨|·ªÆ/g, "U");
  str = str.replace(/·ª≤|√ù|·ª¥|·ª∂|·ª∏/g, "Y");
  str = str.replace(/ƒê/g, "D");
  return str.trim();
};

// H√†m l·∫•y t·∫•t c·∫£ categoryId con recursively (Gi·ªØ nguy√™n)
async function getAllCategoryIds(parentId) {
  const ids = [parentId];
  const children = await Category.find({ parent: parentId });
  for (const child of children) {
    const childIds = await getAllCategoryIds(child._id);
    ids.push(...childIds);
  }
  return ids;
}

// L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m (getProducts)
export const getProducts = async (req, res) => {
  try {
    const {
      search,
      category,
      minPrice,
      maxPrice,
      brand,
      status,
      sortBy,
      order,
      page = 1,
      limit = 10,
    } = req.query;
    let query = {};

    // 1. X·ª≠ l√Ω T√¨m ki·∫øm (SEARCH - ƒê√É S·ª¨A L·ªñI KH√îNG D·∫§U)
    // T√¨m ki·∫øm tr√™n tr∆∞·ªùng name_no_sign b·∫±ng chu·ªói ƒë√£ lo·∫°i b·ªè d·∫•u (Front-end search value)
    if (search) {
      // Lo·∫°i b·ªè d·∫•u kh·ªèi chu·ªói t√¨m ki·∫øm c·ªßa ng∆∞·ªùi d√πng
      const safeSearch = removeVietnameseSigns(search);
      // T√¨m ki·∫øm tr√™n tr∆∞·ªùng name_no_sign kh√¥ng ph√¢n bi·ªát hoa/th∆∞·ªùng (i)
      query.name_no_sign = { $regex: safeSearch, $options: "i" };
    }

    // 2. X·ª≠ l√Ω L·ªçc theo Category
    if (category) {
      const cat = await Category.findOne({ slug: category });
      if (cat) {
        const categoryIds = await getAllCategoryIds(cat._id);
        query.category = { $in: categoryIds };
      }
    }

    // 3. X·ª≠ l√Ω L·ªçc ƒë∆°n gi·∫£n
    if (brand) query.brand = brand;
    if (status) query.status = status;

    // 4. X·ª≠ l√Ω L·ªçc theo Gi√° (PRICE - ƒê√É T·ªêI ∆ØU H√ìA)
    if (minPrice || maxPrice) {
      query.price = {};
      const min = Number(minPrice);
      const max = Number(maxPrice);

      if (!isNaN(min) && min >= 0) query.price.$gte = min;
      if (!isNaN(max) && max > 0) query.price.$lte = max;

      // X√≥a query.price n·∫øu kh√¥ng c√≥ ƒëi·ªÅu ki·ªán n√†o ƒë∆∞·ª£c √°p d·ª•ng
      if (Object.keys(query.price).length === 0) {
        delete query.price;
      }
    }

    // 5. X·ª≠ l√Ω Ph√¢n trang v√† S·∫Øp x·∫øp
    const sortOption = sortBy
      ? { [sortBy]: order === "asc" ? 1 : -1 }
      : { createdAt: -1 };
    const pageSize = Number(limit) > 0 ? Number(limit) : 10;
    const pageNum = Number(page) > 0 ? Number(page) : 1;
    const skip = (pageNum - 1) * pageSize;

    const total = await Product.countDocuments(query);

    const products = await Product.find(query)
      .populate("category", "name slug")
      .sort(sortOption)
      .skip(skip)
      .limit(pageSize);

    res.json({
      total,
      page: pageNum,
      totalPages: Math.ceil(total / pageSize),
      products,
    });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// L·∫•y 1 s·∫£n ph·∫©m
export const getProductById = async (req, res) => {
  try {
    const product = await Product.findById(req.params.id).populate(
      "category",
      "name slug"
    );
    if (!product)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
    res.json(product);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// T·∫°o s·∫£n ph·∫©m m·ªõi (ƒê√É S·ª¨A: L∆ØU TR∆Ø·ªúNG name_no_sign)
export const createProduct = async (req, res) => {
  console.log("üöÄ ~ createProduct ~ req:", req.body, req.file, req.files);
  try {
    const {
      name,
      slug,
      price,
      description,
      category,
      stock,
      brand,
      status,
      size,
      material,
      origin,
      discount,
    } = req.body;

    if (!name)
      return res.status(400).json({ message: "T√™n s·∫£n ph·∫©m l√† b·∫Øt bu·ªôc" });
    if (!price)
      return res.status(400).json({ message: "Gi√° s·∫£n ph·∫©m l√† b·∫Øt bu·ªôc" });
    if (!category)
      return res.status(400).json({ message: "Category l√† b·∫Øt bu·ªôc" }); // Category c√≥ th·ªÉ l√† ObjectId ho·∫∑c slug

    let cat = null;
    if (mongoose.Types.ObjectId.isValid(category)) {
      cat = await Category.findById(category);
    }
    if (!cat) {
      cat = await Category.findOne({ slug: category });
    }
    if (!cat) return res.status(400).json({ message: "Category kh√¥ng h·ª£p l·ªá" }); // T·ª± sinh slug n·∫øu kh√¥ng c√≥

    const finalSlug = slug || name.toLowerCase().replace(/\s+/g, "-");

    // L∆ØU TR∆Ø·ªúNG name_no_sign B·∫∞NG C√ÅCH LO·∫†I B·ªé D·∫§U T·ª™ TR∆Ø·ªúNG name
    const nameNoSign = removeVietnameseSigns(name); // X·ª≠ l√Ω ·∫£nh upload ho·∫∑c URL s·∫µn c√≥

    const images = [];
    if (req.file) images.push(req.file.path); // single file
    if (req.files) images.push(...req.files.map((f) => f.path)); // multiple files
    if (req.body.images) images.push(...req.body.images); // URL c√≥ s·∫µn

    const newProduct = new Product({
      name,
      name_no_sign: nameNoSign, // üö® L∆ØU TR∆Ø·ªúNG M·ªöI ƒê·ªÇ T√åM KI·∫æM
      slug: finalSlug,
      price,
      description,
      category: cat._id,
      stock,
      brand,
      status,
      size,
      material,
      origin,
      discount,
      images,
    });

    const savedProduct = await newProduct.save();
    const populatedProduct = await savedProduct.populate(
      "category",
      "name slug"
    );

    res.status(201).json(populatedProduct);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

// C·∫≠p nh·∫≠t s·∫£n ph·∫©m (ƒê√É S·ª¨A: C·∫¨P NH·∫¨T TR∆Ø·ªúNG name_no_sign)
export const updateProduct = async (req, res) => {
  try {
    const updateData = { ...req.body }; // Category n·∫øu g·ª≠i slug ho·∫∑c ObjectId

    if (updateData.category) {
      const cat = mongoose.Types.ObjectId.isValid(updateData.category)
        ? await Category.findById(updateData.category)
        : await Category.findOne({ slug: updateData.category });
      if (!cat)
        return res.status(400).json({ message: "Category kh√¥ng h·ª£p l·ªá" });
      updateData.category = cat._id;
    } // T·ª± sinh slug n·∫øu kh√¥ng c√≥

    if (updateData.name && !updateData.slug) {
      updateData.slug = updateData.name.toLowerCase().replace(/\s+/g, "-");
    }

    // üö® TH√äM LOGIC C·∫¨P NH·∫¨T name_no_sign
    if (updateData.name) {
      updateData.name_no_sign = removeVietnameseSigns(updateData.name);
    } // X·ª≠ l√Ω ·∫£nh upload ho·∫∑c URL

    const images = [];
    if (req.file) images.push(req.file.path);
    if (req.files) images.push(...req.files.map((f) => f.path));
    if (req.body.images) images.push(...req.body.images);
    if (images.length > 0) updateData.images = images;

    const updatedProduct = await Product.findByIdAndUpdate(
      req.params.id,
      updateData,
      { new: true }
    ).populate("category", "name slug");

    if (!updatedProduct)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });

    res.json(updatedProduct);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

// X√≥a s·∫£n ph·∫©m
export const deleteProduct = async (req, res) => {
  try {
    const deletedProduct = await Product.findByIdAndDelete(req.params.id);
    if (!deletedProduct)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
    res.json({ message: "X√≥a s·∫£n ph·∫©m th√†nh c√¥ng" });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};
