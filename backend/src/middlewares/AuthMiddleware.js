// src/middlewares/AuthMiddleware.js
import jwt from "jsonwebtoken";
import User from "../models/UserModel.js";

// @desc    Middleware x√°c th·ª±c ng∆∞·ªùi d√πng
export const protect = async (req, res, next) => {
  let token;

  try {
    // 1. Ki·ªÉm tra Token t·ª´ Header (Bearer) ho·∫∑c Cookie
    if (
      req.headers.authorization &&
      req.headers.authorization.startsWith("Bearer")
    ) {
      token = req.headers.authorization.split(" ")[1];
    }

    if (!token) {
      const err = new Error("Kh√¥ng c√≥ token, truy c·∫≠p b·ªã t·ª´ ch·ªëi");
      err.statusCode = 401;
      throw err;
    }

    // 2. X√°c th·ª±c v√† t√¨m User
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const user = await User.findById(decoded.id).select("-password");
    if (!user) {
      const err = new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i");
      err.statusCode = 401;
      throw err;
    }

    req.user = user; // attach user
    next();
  } catch (error) {
    // B·∫•t k·ª≥ l·ªói n√†o (JWT expired, invalid signature, no token) -> 401
    error.statusCode = error.statusCode || 401;
    next(error);
  }
};

// ---

// @desc    Middleware ki·ªÉm tra quy·ªÅn Admin
// üîë B·ªî SUNG: H√†m n√†y b·ªã thi·∫øu 'export' v√† ƒë·ªãnh nghƒ©a
export const admin = (req, res, next) => {
  // Middleware n√†y PH·∫¢I ch·∫°y sau 'protect', n√™n req.user ƒë√£ t·ªìn t·∫°i
  if (req.user && req.user.role === "admin") {
    next();
  } else {
    const err = new Error(
      "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p. Ch·ªâ Admin m·ªõi c√≥ th·ªÉ th·ª±c hi·ªán thao t√°c n√†y."
    );
    err.statusCode = 403; // 403 Forbidden
    next(err);
  }
};
